// This is a skeleton starter React component generated by Plasmic.
// This file is owned by you, feel free to edit as you see fit.
import SimplePathRow from "@/wab/client/components/SimplePathRow";
import SimplePathRowHeader from "@/wab/client/components/SimplePathRowHeader";
import { motion } from "framer-motion";
import * as React from "react";
import { CSSProperties, useState } from "react";
import { richSummarizeVal } from "@/wab/client/components/sidebar-tabs/data-tab";
import {
  DefaultSimplePathColumnProps,
  PlasmicSimplePathColumn,
} from "@/wab/client/plasmic/plasmic_kit_data_expressions/PlasmicSimplePathColumn";
import { Dict } from "@/wab/shared/collections";
import { uncheckedCast } from "@/wab/shared/common";

interface SimplePathColumnProps extends DefaultSimplePathColumnProps {
  scope: Dict<any>;
  isFocused: boolean;
  onSelect: (key: string) => void;
  onMaskClick: () => void;
  scopeHeader: string;
  style?: CSSProperties;
}

const slideInFromRight = {
  hidden: {
    x: "100%",
  },
  visible: {
    x: "0",
  },
};

const standardTransition = { type: "spring", bounce: 0.1, duration: 0.2 };

function SimplePathColumn({
  scope,
  isFocused,
  onSelect,
  scopeHeader,
  onMaskClick,
  ...props
}: SimplePathColumnProps) {
  const [search, setSearch] = useState("");
  const [selectedKey, setSelectedKey] = useState<string | undefined>(undefined);
  return (
    <PlasmicSimplePathColumn
      {...props}
      root={{
        // eslint-disable-next-line @typescript-eslint/no-shadow
        render: (props) => (
          <motion.div
            {...uncheckedCast(props)}
            initial={"hidden"}
            animate={"visible"}
            variants={slideInFromRight}
            transition={standardTransition}
          />
        ),
      }}
      isUnfocused={!isFocused}
      searchInput={{
        value: search,
        onChange: (e) => setSearch(e.target.value),
      }}
      rows={{
        children: (
          <>
            <SimplePathRowHeader>{scopeHeader}</SimplePathRowHeader>
            {Object.entries(scope)
              .filter(([k, v]) =>
                k.toLowerCase().includes(search.toLowerCase())
              )
              .map(([k, v]) => (
                <SimplePathRow
                  key={k}
                  name={k}
                  details={richSummarizeVal(v)}
                  isSelected={selectedKey === k}
                  inUnfocusedColumn={!isFocused}
                  onClick={() => {
                    setSelectedKey(k);
                    onSelect(k);
                  }}
                />
              ))}
          </>
        ),
      }}
      mask={{
        onClick: onMaskClick,
      }}
    />
  );
}

export default SimplePathColumn;
