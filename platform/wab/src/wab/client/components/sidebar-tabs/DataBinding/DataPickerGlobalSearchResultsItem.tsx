// This is a skeleton starter React component generated by Plasmic.
// This file is owned by you, feel free to edit as you see fit.
import { supportedTypes } from "@/wab/client/components/sidebar-tabs/DataBinding/DataPickerUtil";
import { Matcher } from "@/wab/client/components/view-common";
import {
  DefaultDataPickerGlobalSearchResultsItemProps,
  PlasmicDataPickerGlobalSearchResultsItem,
} from "@/wab/client/plasmic/plasmic_kit_data_binding/PlasmicDataPickerGlobalSearchResultsItem";
import { flattenedKeys } from "@/wab/shared/core/exprs";
import { HTMLElementRefOf } from "@plasmicapp/react-web";
import { isArray } from "lodash";
import * as React from "react";

export interface DataPickerGlobalSearchResultsItemProps
  extends DefaultDataPickerGlobalSearchResultsItemProps {
  itemPath: (string | number)[] | undefined;
  previewValue: string | undefined;
  variableType: supportedTypes;
  matcher: Matcher;
  onClick: () => void;
  flatten?: boolean;
}

function DataPickerGlobalSearchResultsItem_(
  props: DataPickerGlobalSearchResultsItemProps,
  ref: HTMLElementRefOf<"div">
) {
  const { itemPath, previewValue, variableType, matcher, onClick, flatten } =
    props;
  if (!isArray(itemPath)) {
    return null;
  }

  const joinedPath = itemPath
    .slice(
      flatten && itemPath.length > 0 && flattenedKeys.has(itemPath[0] as string)
        ? 1
        : 0,
      itemPath.length - 1
    )
    .join(" / ");

  return (
    <PlasmicDataPickerGlobalSearchResultsItem
      root={{ ref }}
      itemPath={joinedPath + (joinedPath.length > 0 ? " / " : "")}
      itemName={matcher.boldSnippets(
        <div>{itemPath[itemPath.length - 1]}</div>
      )}
      variableType={variableType}
      previewValue={previewValue}
      onClick={onClick}
    />
  );
}

const DataPickerGlobalSearchResultsItem = React.forwardRef(
  DataPickerGlobalSearchResultsItem_
);
export default DataPickerGlobalSearchResultsItem;
