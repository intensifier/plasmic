// This is a skeleton starter React component generated by Plasmic.
// This file is owned by you, feel free to edit as you see fit.
import SharePageModal from "@/wab/client/components/analytics/SharePageModal";
import { useChartData } from "@/wab/client/components/analytics/useChartData";
import {
  ANALYTICS_EVENTS,
  formatChartData,
  getChartHeaders,
} from "@/wab/client/components/analytics/utils";
import {
  DefaultDataFiltersProps,
  PlasmicDataFilters,
} from "@/wab/client/plasmic/plasmic_kit_analytics/PlasmicDataFilters";
import PlasmicLabeledSelect from "@/wab/client/plasmic/plasmic_kit_analytics/PlasmicLabeledSelect";
import { HTMLElementRefOf } from "@plasmicapp/react-web";
import { DatePicker } from "antd";
import moment, { Moment } from "moment";
import * as React from "react";
import { CSVLink } from "react-csv";
import { Modal } from "@/wab/client/components/widgets/Modal";

type TimeRange = [Moment | null, Moment | null];
export interface DataFiltersProps extends DefaultDataFiltersProps {
  projectId?: string;
  timeRange: TimeRange;
  event: string;
  period: string;
  chartData: ReturnType<typeof useChartData>;
  setTimeRange: (_: TimeRange) => void;
  setEvent: (_: string) => void;
  setPeriod: (_: string) => void;
}

function DataFilters_(props: DataFiltersProps, ref: HTMLElementRefOf<"div">) {
  const {
    timeRange,
    setTimeRange,
    event,
    setEvent,
    period,
    setPeriod,
    projectId,
    chartData,
    ...rest
  } = props;
  const [isModalVisible, setIsModalVisible] = React.useState(false);
  return (
    <>
      <Modal
        visible={isModalVisible}
        onCancel={() => setIsModalVisible(false)}
        footer={null}
      >
        <SharePageModal />
      </Modal>
      <PlasmicDataFilters
        root={{ ref }}
        timeRangeFilter={{
          render: (_props: React.RefAttributes<HTMLDivElement>, _ref) => {
            const { key, ..._rest } = _props;
            return (
              <PlasmicLabeledSelect
                root={{ ref: _ref as any }}
                key={`time-range-${key}`}
                {..._rest}
                label="Time Range"
                select={{
                  render: () => {
                    return (
                      <DatePicker.RangePicker
                        value={timeRange as any}
                        ranges={
                          {
                            "Last week": () => [
                              moment().subtract(1, "week"),
                              moment(),
                            ],
                            "Last month": () => [
                              moment().subtract(1, "month"),
                              moment(),
                            ],
                          } as any
                        }
                        onChange={(values) => {
                          if (values) {
                            setTimeRange(values);
                          }
                        }}
                        disabledDate={(date) => {
                          return moment(date).isAfter(moment().endOf("day"));
                        }}
                      ></DatePicker.RangePicker>
                    );
                  },
                }}
              />
            );
          },
        }}
        eventFilter={{
          options: ANALYTICS_EVENTS.filter((_event) =>
            projectId ? true : _event.value.includes("impressions")
          ),
          selected: event,
          onChange: (x) => setEvent(x ?? "impressions"),
        }}
        periodPicker={{
          period,
          setPeriod,
        }}
        shareBtn={{
          onClick: () => setIsModalVisible(true),
        }}
        exportBtn={{
          wrap: (node) => {
            return (
              <CSVLink
                data={formatChartData(chartData)}
                headers={getChartHeaders(chartData)}
                filename="plasmic-analytics.csv"
              >
                {node}
              </CSVLink>
            );
          },
        }}
        {...rest}
      />
    </>
  );
}

const DataFilters = React.forwardRef(DataFilters_);
export default DataFilters;
