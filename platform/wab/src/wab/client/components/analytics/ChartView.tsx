// This is a skeleton starter React component generated by Plasmic.
// This file is owned by you, feel free to edit as you see fit.
import {
  ChartFilters,
  useChartData,
} from "@/wab/client/components/analytics/useChartData";
import { getEventLabel } from "@/wab/client/components/analytics/utils";
import { Spinner } from "@/wab/client/components/widgets";
import {
  DefaultChartViewProps,
  PlasmicChartView,
} from "@/wab/client/plasmic/plasmic_kit_analytics/PlasmicChartView";
import { ensure } from "@/wab/shared/common";
import { HTMLElementRefOf } from "@plasmicapp/react-web";
import moment from "moment";
import * as React from "react";
import {
  Line,
  LineChart,
  ResponsiveContainer,
  Tooltip,
  XAxis,
  YAxis,
} from "recharts";

export interface ChartViewProps extends DefaultChartViewProps, ChartFilters {
  chartData: ReturnType<typeof useChartData>;
}

const CHART_MARGIN = {
  top: 20,
  bottom: 20,
  right: 50,
  left: 50,
};

const ORIGINAL_STROKE_COLOR = "#3182bd";
const OVERRIDE_STROKE_COLOR = "#ff82bd";

function AnalyticsChartResult(
  props: ReturnType<typeof useChartData> & ChartFilters
) {
  const { event, splitId, analyticsQuery, projectMeta } = props;

  if (!analyticsQuery || !projectMeta) {
    return null;
  }
  const analyticsData = analyticsQuery.data;

  const XAxisByTime = (
    <XAxis
      dataKey={"time"}
      minTickGap={10}
      tickFormatter={(value) => {
        return moment.utc(value).format("MM-DD");
      }}
      label={{
        value: "",
        position: "bottom",
      }}
    />
  );

  const YAxisWithLabel = (
    <YAxis
      label={{
        value: "",
        angle: -90,
        position: "left",
      }}
    />
  );

  const TooltipWithLabel = (
    <Tooltip
      labelFormatter={(value) => {
        return moment.utc(value).format("MM-DD");
      }}
    />
  );

  if (Array.isArray(analyticsData)) {
    return (
      <ResponsiveContainer>
        <LineChart data={analyticsData} margin={CHART_MARGIN}>
          {XAxisByTime}
          {YAxisWithLabel}
          {TooltipWithLabel}
          <Line
            type="monotone"
            name={getEventLabel(event)}
            dataKey={event}
            dot={false}
          />
        </LineChart>
      </ResponsiveContainer>
    );
  }

  ensure(splitId, "SplitId shouldn't be null for ChartView");

  const split = projectMeta.splits.find((s) => s.id === splitId);
  const sliceOriginal = ensure(
    split?.slices[0].id,
    "SplitSliceId shouldn't be null for ChartView"
  );
  const sliceOverride = ensure(
    split?.slices[1].id,
    "SplitSliceId shouldn't be null for ChartView"
  );
  const originalData = analyticsData[sliceOriginal];
  const overrideData = analyticsData[sliceOverride];

  return (
    <ResponsiveContainer>
      <LineChart data={originalData || overrideData} margin={CHART_MARGIN}>
        {XAxisByTime}
        {YAxisWithLabel}
        {TooltipWithLabel}
        <Line
          type="monotone"
          name={`Original ${getEventLabel(event)}`}
          dataKey={({ time }) => {
            if (!originalData) {
              return 0;
            }
            const elem = (originalData as any[]).find((e) => e.time === time);
            return elem[event];
          }}
          dot={false}
          stroke={ORIGINAL_STROKE_COLOR}
        />
        <Line
          type="monotone"
          name={`Override ${getEventLabel(event)}`}
          dataKey={({ time }) => {
            if (!overrideData) {
              return 0;
            }
            const elem = (overrideData as any[]).find((e) => e.time === time);
            return elem[event];
          }}
          dot={false}
          stroke={OVERRIDE_STROKE_COLOR}
        />
      </LineChart>
    </ResponsiveContainer>
  );
}

function ChartView_(props: ChartViewProps, ref: HTMLElementRefOf<"div">) {
  const {
    teamId,
    workspaceId,
    projectId,
    componentId,
    splitId,
    timeRange,
    event,
    period,
    chartData,
    ...rest
  } = props;

  return (
    <PlasmicChartView
      root={{ ref }}
      loading={chartData.isLoading}
      empty={!chartData.isLoading && chartData.isEmpty}
      loadingBox={{
        render: () => {
          if (!chartData.isLoading) {
            return null;
          }
          return <Spinner />;
        },
      }}
      chart={
        <AnalyticsChartResult
          event={event}
          teamId={teamId}
          projectId={projectId}
          componentId={componentId}
          splitId={splitId}
          timeRange={timeRange}
          period={period}
          {...chartData}
        />
      }
      {...rest}
    />
  );
}

const ChartView = React.forwardRef(ChartView_);
export default ChartView;
