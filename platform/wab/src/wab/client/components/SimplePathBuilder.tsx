// This is a skeleton starter React component generated by Plasmic.
// This file is owned by you, feel free to edit as you see fit.
import SimplePathColumn from "@/wab/client/components/SimplePathColumn";
import { Var } from "@/wab/shared/model/classes";
import L from "lodash";
import * as React from "react";
import { useState } from "react";
import {
  DefaultSimplePathBuilderProps,
  PlasmicSimplePathBuilder,
} from "@/wab/client/plasmic/plasmic_kit_data_expressions/PlasmicSimplePathBuilder";
import { ensure, pathGet } from "@/wab/shared/common";
import { joinReactNodes } from "@/wab/commons/components/ReactUtil";

interface SimplePathBuilderProps extends DefaultSimplePathBuilderProps {
  onSubmit: (expr: any) => void;
  env?: any;
}

function SimplePathBuilder({
  onSubmit,
  env,
  ...props
}: SimplePathBuilderProps) {
  const [baseRef, setBaseRef] = useState<Var | undefined>(undefined);
  const [subpath, setSubpath] = useState<string[]>([]);

  function shouldExpand(x: any) {
    return Object.keys(x).length > 0 && !L.isString(x);
  }
  const parts = !baseRef ? [] : [baseRef.name, ...subpath];
  const columns = [...parts];
  if (!baseRef || shouldExpand(pathGet(env.get(baseRef), subpath))) {
    columns.push("");
  }
  const isValidSelection = false;
  function handleSubmit() {
    /*onSubmit(
      mkSimplePath({
        baseRef: ensure(baseRef, () => `baseRef is not set`),
        subpath,
      })
    );*/
  }

  return (
    <PlasmicSimplePathBuilder
      {...props}
      columns={{
        children: columns.map((_, column) => (
          <SimplePathColumn
            key={column}
            scopeHeader={column === 0 ? "Variables" : "Fields"}
            scope={
              column === 0
                ? Object.fromEntries(
                    env.toBindings().map((b) => [b.variable.name, b.val])
                  )
                : pathGet(
                    env.get(ensure(baseRef, () => `baseRef is not set`)),
                    parts.slice(1, column)
                  )
            }
            isFocused={column === columns.length - 1}
            onSelect={(key) => {
              if (column === 0) {
                setBaseRef(
                  env
                    .toBindings()
                    .map((b) => b.variable)
                    .find((v) => v.name === key)
                );
              } else {
                setSubpath([...subpath.slice(0, column - 1), key]);
              }
            }}
            style={{
              position: column === 0 ? undefined : "absolute",
              top: 0,
              left: 40 * column,
              right: 0,
              width: column === 0 ? undefined : "auto",
            }}
            onMaskClick={() => {
              if (column === 0) {
                setBaseRef(undefined);
                setSubpath([]);
              } else {
                setSubpath(subpath.slice(0, column - 1));
              }
            }}
          />
        )),
      }}
      path={{
        children: joinReactNodes(
          parts.map((part) => (
            <div className={"inline-block code"}>{part}</div>
          )),
          <div className={"inline-block"}>â–¸</div>
        ),
      }}
      saveButton={{
        disabled: !isValidSelection,
        onClick: () => handleSubmit,
      }}
    />
  );
}

export default SimplePathBuilder;
