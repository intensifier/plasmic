// This is a skeleton starter React component generated by Plasmic.
// This file is owned by you, feel free to edit as you see fit.
import {
  DefaultExperimentEternalIdsProps,
  PlasmicExperimentEternalIds,
} from "@/wab/client/plasmic/plasmic_kit_optimize/PlasmicExperimentEternalIds";
import { Split } from "@/wab/shared/model/classes";
import { SplitType } from "@/wab/shared/core/splits";
import { HTMLElementRefOf } from "@plasmicapp/react-web";
import * as React from "react";

// Your component props start with props for variants and slots you defined
// in Plasmic, but you can add more here, like event handlers that you can
// attach to named nodes in your component.
//
// If you don't want to expose certain variants or slots as a prop, you can use
// Omit to hide them:
//
// interface ExperimentEternalIdsProps extends Omit<DefaultExperimentEternalIdsProps, "hideProps1"|"hideProp2"> {
//   // etc.
// }
//
// You can also stop extending from DefaultExperimentEternalIdsProps altogether and have
// total control over the props for your component.
export interface ExperimentEternalIdsProps
  extends DefaultExperimentEternalIdsProps {
  split: Split;
  meta: {
    externalId?: string;
    aExternalId?: string;
    bExternalId?: string;
  };
  onChange: (label: string, value: string) => void;
}

function ExperimentEternalIds_(
  props: ExperimentEternalIdsProps,
  ref: HTMLElementRefOf<"div">
) {
  const { split, meta, onChange } = props;
  const [isExpanded, setIsExpanded] = React.useState(false);
  return (
    <PlasmicExperimentEternalIds
      root={{ ref }}
      isExpanded={isExpanded}
      isSegmentation={split.splitType !== SplitType.Experiment}
      expandBtn={{
        onClick: () => {
          setIsExpanded((e) => !e);
        },
      }}
      {...[
        {
          label: "externalId",
          value: "experimentExternalIdInput",
        },
        {
          label: "aExternalId",
          value: "aExternalIdInput",
        },
        {
          label: "bExternalId",
          value: "bExternalIdInput",
        },
      ].reduce((acc, { label, value }) => {
        return {
          ...acc,
          [value]: {
            value: meta[label],
            onChange: (e) => {
              onChange(label, e.target.value);
            },
          },
        };
      }, {})}
    />
  );
}

const ExperimentEternalIds = React.forwardRef(ExperimentEternalIds_);
export default ExperimentEternalIds;
