import {
  isKnownRandomSplitSlice,
  isKnownSegmentSplitSlice,
} from "@/wab/shared/model/classes";
// This is a skeleton starter React component generated by Plasmic.
// This file is owned by you, feel free to edit as you see fit.
import ExperimentPanel from "@/wab/client/components/splits/ExperimentPanel";
import SliceControls from "@/wab/client/components/splits/SliceControls";
import { extractGlobalVariantSplitContent } from "@/wab/client/components/splits/split-utils";
import TitleEditable from "@/wab/client/components/top-bar/TitleEditable";
import { EditableLabel } from "@/wab/client/components/widgets/EditableLabel";
import Select from "@/wab/client/components/widgets/Select";
import PlasmicExperimentModal from "@/wab/client/plasmic/plasmic_kit_optimize/PlasmicExperimentModal";
import { useStudioCtx } from "@/wab/client/studio-ctx/StudioCtx";
import { spawn } from "@/wab/shared/common";
import { Split, SplitSlice } from "@/wab/shared/model/classes";
import { SplitType } from "@/wab/shared/core/splits";
import { observer } from "mobx-react";
import * as React from "react";

function extractValue(slice: SplitSlice) {
  if (isKnownRandomSplitSlice(slice)) {
    return slice.prob;
  }
  if (isKnownSegmentSplitSlice(slice)) {
    return slice.cond;
  }
  throw new Error("Unsupported");
}

export const ExperimentModal = observer(function ExperimentModal(props: {
  split: Split;
  onClose: () => void;
}) {
  const { split, onClose } = props;
  const studioCtx = useStudioCtx();
  const tplMgr = studioCtx.tplMgr();

  const slicesValues = split.slices.map(extractValue);

  const changeSlicesValues = (newVals: any[]) => {
    spawn(
      studioCtx.change(({ success }) => {
        newVals.forEach((val, _idx) => {
          const slice = split.slices[_idx];
          if (isKnownRandomSplitSlice(slice)) {
            slice.prob = val;
          } else if (isKnownSegmentSplitSlice(slice)) {
            slice.cond = val;
          }
        });
        return success();
      })
    );
  };

  const ExperimentEditableTitle = (
    <TitleEditable
      children={
        <EditableLabel
          labelFactory={(_props) => <span {..._props} className="strong" />}
          value={split.name}
          onEdit={(newName: string) => {
            if (newName && newName !== split.name) {
              spawn(
                studioCtx.change(({ success }) => {
                  const group = extractGlobalVariantSplitContent(split);
                  if (group) {
                    tplMgr.renameVariantGroup(group, newName);
                    split.name = newName;
                  }
                  return success();
                })
              );
            }
          }}
        >
          {split.name}
        </EditableLabel>
      }
    />
  );

  return (
    <PlasmicExperimentModal
      descriptionInput={{
        value: split.description ?? "",
        onChange: (e) => {
          e.persist();
          spawn(
            studioCtx.change(({ success }) => {
              split.description = e.target.value;
              return success();
            })
          );
        },
      }}
      title={{
        render: () => {
          return ExperimentEditableTitle;
        },
      }}
      type={split.splitType}
      closeButton={{
        onClick: onClose,
      }}
      versions={
        <>
          {split.slices.map((_, idx) => {
            if (idx === 0 && split.splitType !== SplitType.Experiment) {
              return null;
            }
            return (
              <ExperimentPanel
                key={`${split.uuid}-version-${idx}`}
                split={split}
                idx={idx}
                values={slicesValues}
                changeValues={changeSlicesValues}
              />
            );
          })}
        </>
      }
      experimentEvents={{
        props: {
          events: split.targetEvents,
          changeEvents: (newEvents: string[]) => {
            spawn(
              studioCtx.change(({ success }) => {
                split.targetEvents = newEvents;
                return success();
              })
            );
          },
        },
      }}
      experimentEternalIds={{
        props: {
          split,
          meta: {
            externalId: split.externalId ?? undefined,
            aExternalId: split.slices[0].externalId ?? undefined,
            bExternalId: split.slices[1].externalId ?? undefined,
          },
          onChange: (label: string, value: string) => {
            spawn(
              studioCtx.change(({ success }) => {
                if (label === "externalId") {
                  split.externalId = value;
                }
                if (label === "aExternalId") {
                  split.slices[0].externalId = value;
                }
                if (label === "bExternalId") {
                  split.slices[1].externalId = value;
                }
                return success();
              })
            );
          },
        },
      }}
      toggle={{
        split,
      }}
      statusSelect={{
        props: {
          name: "status",
          value: split.status,
          onChange: (value) => {
            if (value) {
              spawn(
                studioCtx.change(({ success }) => {
                  split.status = value as "new" | "running" | "stopped";
                  return success();
                })
              );
            }
          },
          children: [
            <Select.Option value="running">Running</Select.Option>,
            <Select.Option value="stopped">Stopped</Select.Option>,
          ],
        },
      }}
      splitControls={
        (split.splitType === SplitType.Schedule ||
          split.splitType === SplitType.Segment) && (
          <SliceControls
            split={split}
            idx={1}
            values={slicesValues}
            onChange={changeSlicesValues}
          />
        )
      }
    />
  );
});
