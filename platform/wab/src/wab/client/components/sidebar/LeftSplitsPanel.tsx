import { isKnownGlobalVariantSplitContent } from "@/wab/shared/model/classes";
// This is a skeleton starter React component generated by Plasmic.
// This file is owned by you, feel free to edit as you see fit.
import { ExperimentModal } from "@/wab/client/components/splits/ExperimentModal";
import { ExperimentRows } from "@/wab/client/components/splits/ExperimentRows";
import {
  DefaultLeftSplitsPanelProps,
  PlasmicLeftSplitsPanel,
} from "@/wab/client/plasmic/plasmic_kit_left_pane/PlasmicLeftSplitsPanel";
import { useStudioCtx } from "@/wab/client/studio-ctx/StudioCtx";
import { assert } from "@/wab/shared/common";
import { Split } from "@/wab/shared/model/classes";
import { SplitStatus, SplitType } from "@/wab/shared/core/splits";
import { HTMLElementRefOf } from "@plasmicapp/react-web";
import { autorun } from "mobx";
import * as React from "react";
import { animated, useTransition } from "react-spring";

export type LeftSplitsPanelProps = DefaultLeftSplitsPanelProps;

const getGlobalVariantNameBySplitType = (type: SplitType) => {
  switch (type) {
    case SplitType.Experiment:
      return "Experiment";
    case SplitType.Schedule:
      return "Schedule";
    case SplitType.Segment:
      return "Segment";
  }
  return "";
};

const VARIANT_NAME = "override";

function LeftSplitsPanel_(
  props: LeftSplitsPanelProps,
  ref: HTMLElementRefOf<"div">
) {
  const studioCtx = useStudioCtx();
  const splits = studioCtx.site.splits;
  const readOnly = studioCtx.getLeftTabPermission("splits") === "readable";

  const [editSplit, setEditSplit] = React.useState<Split | undefined>(
    undefined
  );
  const [state, setState] = React.useState<Array<"panel" | "modal">>(["panel"]);

  const focusSplit = (split: Split) => {
    setEditSplit(split);
    setState(["panel", "modal"]);
  };

  React.useEffect(() => {
    const dispose = autorun(() => {
      const forceOpenSplit = studioCtx.forceOpenSpit;
      if (forceOpenSplit) {
        focusSplit(forceOpenSplit);
        studioCtx.forceOpenSplit = null;
      }
    });
    return dispose;
  }, [studioCtx]);

  const addNewSplit = (type: SplitType) => {
    return studioCtx.change(({ success }) => {
      const tplMgr = studioCtx.tplMgr();
      const globalVariantGroup = tplMgr.createGlobalVariantGroup(
        getGlobalVariantNameBySplitType(type)
      );
      const globalVariant = tplMgr.createGlobalVariant(
        globalVariantGroup,
        VARIANT_NAME
      );

      const split = studioCtx.tplMgr().addGlobalVariantSplit({
        group: globalVariantGroup,
        variant: globalVariant,
        type,
        status: SplitStatus.New,
      });

      focusSplit(split);

      return success();
    });
  };

  const removeSplit = async (split: Split) => {
    const content = split.slices[1].contents[0];

    assert(isKnownGlobalVariantSplitContent(content), "Unknown split content");

    await studioCtx.siteOps().removeSplitAndGlobalVariant(split, content.group);
  };

  const displayedEffect = { transform: "translate3d(0%,0,0)" };
  const preemptedEffect = { transform: "translate3d(-105%,0,0)" };
  const closedEffect = { transform: "translate3d(105%,0,0)" };
  const transitions = useTransition(state, {
    from: closedEffect,
    enter: displayedEffect,
    leave: closedEffect,
    keys: (s) => s,

    update: (item) =>
      item === state[state.length - 1] ? displayedEffect : preemptedEffect,
    unique: true,
  });

  return (
    <div
      style={{
        position: "relative",
        overflow: "hidden",
        top: 0,
        left: 0,
        width: "100%",
        height: "100%",
      }}
    >
      {transitions((_props, item) => {
        const Panel = (
          <PlasmicLeftSplitsPanel
            root={{ ref }}
            abContent={{
              render: () => (
                <ExperimentRows
                  splits={splits}
                  type={SplitType.Experiment}
                  onClick={focusSplit}
                  onDelete={readOnly ? undefined : removeSplit}
                />
              ),
            }}
            segmentsContent={{
              render: () => (
                <ExperimentRows
                  splits={splits}
                  type={SplitType.Segment}
                  onClick={focusSplit}
                  onDelete={readOnly ? undefined : removeSplit}
                />
              ),
            }}
            scheduledContent={{
              render: () => (
                <ExperimentRows
                  splits={splits}
                  type={SplitType.Schedule}
                  onClick={focusSplit}
                  onDelete={readOnly ? undefined : removeSplit}
                />
              ),
            }}
            newTestButton={
              readOnly
                ? { render: () => null }
                : {
                    onClick: () => addNewSplit(SplitType.Experiment),
                  }
            }
            newSegmentButton={
              readOnly
                ? { render: () => null }
                : {
                    onClick: () => addNewSplit(SplitType.Segment),
                  }
            }
            newScheduleButton={
              readOnly
                ? { render: () => null }
                : {
                    onClick: () => addNewSplit(SplitType.Schedule),
                  }
            }
            {...props}
          />
        );
        const Modal = editSplit && (
          <ExperimentModal
            split={editSplit}
            onClose={() => {
              setState(["panel"]);
            }}
          />
        );
        return (
          <animated.div
            key={item}
            style={{
              position: "absolute",
              top: 0,
              left: 0,
              width: "100%",
              height: "100%",
              ..._props,
            }}
          >
            {item === "panel" ? Panel : Modal}
          </animated.div>
        );
      })}
    </div>
  );
}

const LeftSplitsPanel = React.forwardRef(LeftSplitsPanel_);
export default LeftSplitsPanel;
