// This is a skeleton starter React component generated by Plasmic.
// This file is owned by you, feel free to edit as you see fit.
import { Menu } from "antd";
import { observer, Observer } from "mobx-react";
import * as React from "react";
import { useState } from "react";
import { WithContextMenu } from "@/wab/client/components/ContextMenu";
import { LegacyComponentParamsSection } from "@/wab/client/components/sidebar-tabs/legacy-component-params-section";
import { ImageAssetPreviewAndPicker } from "@/wab/client/components/style-controls/ImageSelector";
import {
  DefaultPageSettingsProps,
  PlasmicPageSettings,
} from "@/wab/client/plasmic/plasmic_kit_page_settings/PlasmicPageSettings";
import { useStudioCtx } from "@/wab/client/studio-ctx/StudioCtx";
import { nullToUndefined, spawn } from "@/wab/shared/common";
import { PageComponent } from "@/wab/shared/core/components";
import { ImageAssetType } from "@/wab/shared/core/image-asset-type";

interface PageSettingsProps extends DefaultPageSettingsProps {
  page: PageComponent;
}

const PageSettings = observer(function PageSettings({
  page,
  ...props
}: PageSettingsProps) {
  const sc = useStudioCtx();
  const pageMeta = page.pageMeta;
  const [route, setRoute] = useState(pageMeta.path);
  const [title, setTitle] = useState(pageMeta.title);
  const [description, setDescription] = useState(pageMeta.description);
  const [canonical, setCanonical] = useState(pageMeta.canonical);

  return (
    <div>
      <PlasmicPageSettings
        {...props}
        routeInput={{
          value: route,
          onChange: (e) => {
            setRoute(e.target.value);
          },
          onBlur: async () => {
            await sc.tryChangePath(page, route);
            setRoute(page.pageMeta.path);
          },
        }}
        titleInput={{
          value: title ?? "",
          onChange: (e) => {
            setTitle(e.target.value);
          },
          onBlur: async () =>
            sc.changeUnsafe(() => {
              pageMeta.title = title;
            }),
        }}
        descriptionInput={{
          value: description,
          onChange: (e) => {
            setDescription(e.target.value);
          },
          onBlur: async () =>
            sc.changeUnsafe(() => {
              pageMeta.description = description;
            }),
        }}
        characterCount={{
          children: description.length,
        }}
        canonicalInput={{
          value: canonical ?? "",
          onChange: (e) => setCanonical(e.target.value),
          onBlur: async () =>
            sc.change(({ success }) => {
              pageMeta.canonical = canonical;
              return success();
            }),
        }}
        imageAssetPicker={{
          render: () => (
            <Observer>
              {() => (
                <WithContextMenu
                  overlay={() => (
                    <Menu>
                      {pageMeta.openGraphImage && (
                        <Menu.Item
                          key={"remove"}
                          onClick={() => {
                            spawn(
                              sc.change(({ success }) => {
                                pageMeta.openGraphImage = null;
                                return success();
                              })
                            );
                          }}
                        >
                          Clear image
                        </Menu.Item>
                      )}
                    </Menu>
                  )}
                >
                  <ImageAssetPreviewAndPicker
                    studioCtx={sc}
                    type={ImageAssetType.Picture}
                    value={nullToUndefined(pageMeta.openGraphImage)}
                    keepOpen={true}
                    onPicked={(picked) => {
                      spawn(
                        sc.change(({ success }) => {
                          pageMeta.openGraphImage = picked;
                          return success();
                        })
                      );
                    }}
                  />
                </WithContextMenu>
              )}
            </Observer>
          ),
        }}
        propsControl={{
          render: () => (
            <LegacyComponentParamsSection studioCtx={sc} component={page} />
          ),
        }}
      />
    </div>
  );
});
export default PageSettings;
