// This is a skeleton starter React component generated by Plasmic.
// This file is owned by you, feel free to edit as you see fit.
import { AppCtx } from "@/wab/client/app-ctx";
import { useMutateHostAppAuthData } from "@/wab/client/components/app-auth/app-auth-contexts";
import ContextMenu from "@/wab/client/components/ContextMenu";
import { confirm } from "@/wab/client/components/quick-modals";
import { useTopFrameCtx } from "@/wab/client/frame-ctx/top-frame-ctx";
import {
  DefaultAuthConfigProps,
  PlasmicAuthConfig,
} from "@/wab/client/plasmic/plasmic_kit_end_user_management/PlasmicAuthConfig";
import { HTMLElementRefOf } from "@plasmicapp/react-web";
import { Menu, notification } from "antd";
import { uniq } from "lodash";
import * as React from "react";

// Your component props start with props for variants and slots you defined
// in Plasmic, but you can add more here, like event handlers that you can
// attach to named nodes in your component.
//
// If you don't want to expose certain variants or slots as a prop, you can use
// Omit to hide them:
//
// interface AuthConfigProps extends Omit<DefaultAuthConfigProps, "hideProps1"|"hideProp2"> {
//   // etc.
// }
//
// You can also stop extending from DefaultAuthConfigProps altogether and have
// total control over the props for your component.
export interface AuthConfigProps extends DefaultAuthConfigProps {
  appCtx: AppCtx;
  appId: string;
  onCancel: () => void;
  disableAppAuth: () => Promise<void>;
}

function AuthConfig_(props: AuthConfigProps, ref: HTMLElementRefOf<"div">) {
  // Use PlasmicAuthConfig to render this component as it was
  // designed in Plasmic, by activating the appropriate variants,
  // attaching the appropriate event handlers, etc.  You
  // can also install whatever React hooks you need here to manage state or
  // fetch data.
  //
  // Props you can pass into PlasmicAuthConfig are:
  // 1. Variants you want to activate,
  // 2. Contents for slots you want to fill,
  // 3. Overrides for any named node in the component to attach behavior and data,
  // 4. Props to set on the root node.
  //
  // By default, we are just piping all AuthConfigProps here, but feel free
  // to do whatever works for you.

  const { appCtx, appId, disableAppAuth, onCancel, ...rest } = props;

  const { hostFrameApi } = useTopFrameCtx();
  const mutateHostAppAuthData = useMutateHostAppAuthData(appId);
  const [menuPosition, setMenuPosition] = React.useState<
    { x: number; y: number } | undefined
  >(undefined);

  return (
    <>
      <PlasmicAuthConfig
        root={{ ref }}
        closeIcon={{
          onClick: onCancel,
        }}
        gearIcon={{
          onClick: (e) => {
            setMenuPosition({ x: e.clientX, y: e.clientY });
          },
        }}
        {...rest}
      />
      {menuPosition && (
        <ContextMenu
          pageX={menuPosition.x}
          pageY={menuPosition.y}
          onHide={() => setMenuPosition(undefined)}
          overlay={
            <Menu>
              <Menu.Item
                onClick={async () => {
                  const roleUsage = await hostFrameApi.getUsedRolesInProject();
                  const usedInComponents = uniq(
                    roleUsage.map((r) => r.component)
                  );
                  if (usedInComponents.length > 0) {
                    notification.error({
                      message: `Unable to disable. App auth roles are currently being used in the following components: ${usedInComponents.join(
                        ", "
                      )}`,
                    });
                    return;
                  }

                  const hardConfirm = await confirm({
                    title: `Are you sure?`,
                    message:
                      "The current app access rules and app roles will be deleted. This action cannot be undone.",
                  });

                  if (hardConfirm) {
                    await hostFrameApi.setDefaultPageRoleId(null);
                    await appCtx.api.disableAppAuth(appId);
                    // Remove view as from the studio UI
                    await mutateHostAppAuthData();
                    await hostFrameApi.refreshSiteInfo();

                    notification.warn({
                      message: `App auth has been disabled. You can re-enable it at any time.`,
                    });

                    await disableAppAuth();
                    onCancel();
                  }
                }}
              >
                Remove auth from project
              </Menu.Item>
            </Menu>
          }
        />
      )}
    </>
  );
}

const AuthConfig = React.forwardRef(AuthConfig_);
export default AuthConfig;
