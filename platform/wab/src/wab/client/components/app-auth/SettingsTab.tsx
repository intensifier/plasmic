// This is a skeleton starter React component generated by Plasmic.
// This file is owned by you, feel free to edit as you see fit.
import {
  useAppAccessRules,
  useAppAuthConfig,
  useAppRoles,
  useMutateHostAppAuthData,
  useTeamDirectories,
} from "@/wab/client/components/app-auth/app-auth-contexts";
import AuthConfigToken from "@/wab/client/components/app-auth/AuthConfigToken";
import RedirectUrIsControl from "@/wab/client/components/app-auth/RedirectUrIsControl";
import { RolesControl } from "@/wab/client/components/app-auth/RolesControl";
import StyleSelect from "@/wab/client/components/style-controls/StyleSelect";
import {
  AuthProviderTooltip,
  DefaultRoleTooltip,
  RolesTooltip,
  UserDirectoryTooltip,
} from "@/wab/client/components/widgets/DetailedTooltips";
import { LabelWithDetailedTooltip } from "@/wab/client/components/widgets/LabelWithDetailedTooltip";
import Select from "@/wab/client/components/widgets/Select";
import { useAppCtx } from "@/wab/client/contexts/AppContexts";
import { useTopFrameCtx } from "@/wab/client/frame-ctx/top-frame-ctx";
import {
  DefaultSettingsTabProps,
  PlasmicSettingsTab,
} from "@/wab/client/plasmic/plasmic_kit_end_user_management/PlasmicSettingsTab";
import { mkUuid, uniqueName, withoutNils } from "@/wab/shared/common";
import {
  ApiAppAuthConfig,
  ApiEndUserDirectory,
  ApiProject,
  AppAuthProvider,
} from "@/wab/shared/ApiSchema";
import { HTMLElementRefOf } from "@plasmicapp/react-web";
import { notification } from "antd";
import copy from "copy-to-clipboard";
import * as React from "react";
import { KeyedMutator } from "swr";

// Your component props start with props for variants and slots you defined
// in Plasmic, but you can add more here, like event handlers that you can
// attach to named nodes in your component.
//
// If you don't want to expose certain variants or slots as a prop, you can use
// Omit to hide them:
//
// interface SettingsTabProps extends Omit<DefaultSettingsTabProps, "hideProps1"|"hideProp2"> {
//   // etc.
// }
//
// You can also stop extending from DefaultSettingsTabProps altogether and have
// total control over the props for your component.
export interface SettingsTabProps extends DefaultSettingsTabProps {
  project: ApiProject;
  defaultPageRoleId: string | null | undefined;
  setSelectedDirectory: (directory: ApiEndUserDirectory) => void;
}

const PROVIDERS: Array<{ key: AppAuthProvider; label: string }> = [
  {
    key: "plasmic-auth",
    label: "Plasmic Auth",
  },
  {
    key: "custom-auth",
    label: "Custom Auth",
  },
];

function validateRedirectUri(uri: string) {
  try {
    const parsedUri = new URL(uri);
    if (parsedUri.protocol !== "http:" && parsedUri.protocol !== "https:") {
      return {
        href: undefined,
      };
    }
    return {
      href: parsedUri.href,
    };
  } catch (err) {
    return {
      href: undefined,
    };
  }
}

function ProviderSettings(props: {
  projectId: string;
  config: ApiAppAuthConfig;
  mutateAuthConfig: KeyedMutator<ApiAppAuthConfig | null>;
}) {
  const appCtx = useAppCtx();
  const { projectId, config, mutateAuthConfig } = props;
  const [redirectUris, setRedirectUris] = React.useState<string[]>(
    config.redirectUris ?? []
  );

  if (config.provider === "plasmic-auth") {
    return (
      <RedirectUrIsControl
        redirectUris={redirectUris}
        onAdd={() => {
          setRedirectUris([...redirectUris, ""]);
        }}
        onRemove={(i) => {
          const newUris = [...redirectUris];
          newUris.splice(i, 1);
          setRedirectUris(newUris);
        }}
        onChange={(i, value) => {
          const newUris = [...redirectUris];
          newUris[i] = value;
          setRedirectUris(newUris);
        }}
        onSave={async () => {
          const validRedirectUris: string[] = [];
          for (const uri of redirectUris) {
            const validatedRedirectUri = validateRedirectUri(uri);
            if (validatedRedirectUri.href) {
              validRedirectUris.push(validatedRedirectUri.href);
            } else {
              notification.error({
                message: `Invalid redirect URI ${uri}`,
              });
            }
          }

          if (validRedirectUris.length === 0) {
            return;
          }

          await mutateAuthConfig(
            async () => {
              await appCtx.api.upsertAppAuthConfig(projectId, {
                redirectUris: validRedirectUris,
              });
              return appCtx.api.getAppAuthConfig(projectId);
            },
            {
              optimisticData: {
                ...config,
                redirectUris: validRedirectUris,
              },
            }
          );

          setRedirectUris(validRedirectUris);

          notification.success({
            message: "Redirect URIs saved",
          });
        }}
      />
    );
  }

  return (
    <AuthConfigToken
      token={<code className="text-ellipsis">{config.token}</code>}
      onCopy={() => {
        copy(config.token ?? "");
        notification.success({
          message: "Token copied to clipboard",
        });
      }}
    />
  );
}

function SettingsTab_(props: SettingsTabProps, ref: HTMLElementRefOf<"div">) {
  const { project, setSelectedDirectory, defaultPageRoleId, ...rest } = props;
  const appCtx = useAppCtx();

  const { hostFrameApi } = useTopFrameCtx();

  const mutateHostAppAuthData = useMutateHostAppAuthData(project.id);
  const { config, mutate: mutateAuthConfig } = useAppAuthConfig(
    appCtx,
    project.id
  );
  const { roles, mutate: mutateRoles } = useAppRoles(appCtx, project.id);
  const { directories, mutate: mutateDirectories } = useTeamDirectories(
    appCtx,
    project.teamId!
  );
  const { accesses } = useAppAccessRules(appCtx, project.id);

  async function changeConfigProvider(provider: AppAuthProvider | null) {
    await mutateAuthConfig(
      async () => {
        const newAuthConfig = await appCtx.api.upsertAppAuthConfig(project.id, {
          provider,
        });
        // Refresh site info to hide interactions specific to auth providers
        await hostFrameApi.refreshSiteInfo();
        return newAuthConfig;
      },
      {
        optimisticData: {
          ...config,
          provider,
        },
      }
    );
  }

  async function createNewDirectory() {
    const newDirectory = await appCtx.api.createEndUserDirectory(
      project.teamId!,
      uniqueName(
        withoutNils(directories.map((d) => d.name)),
        `App "${project.name}" directory`
      )
    );

    await mutateDirectories();

    await changeConfigDirectory(newDirectory.id);
  }

  async function changeConfigDirectory(directoryId: string) {
    const isUsingGroupAccess = accesses.some(
      (a) => "directoryEndUserGroupId" in a
    );

    if (isUsingGroupAccess) {
      notification.error({
        message:
          "Cannot change directory while group is being used in access list",
      });
      return;
    }

    await mutateAuthConfig(
      async () => {
        const newAuthConfig = await appCtx.api.upsertAppAuthConfig(project.id, {
          directoryId,
        });
        return newAuthConfig;
      },
      {
        optimisticData: {
          ...config,
          directoryId,
        },
      }
    );
  }

  if (!config) {
    return <h1>App is not configured for auth</h1>;
  }
  return (
    <>
      <PlasmicSettingsTab
        root={{ ref }}
        providerLabel={{
          wrap: (node) => (
            <LabelWithDetailedTooltip tooltip={AuthProviderTooltip}>
              {node}
            </LabelWithDetailedTooltip>
          ),
        }}
        directoryLabel={{
          wrap: (node) => (
            <LabelWithDetailedTooltip tooltip={UserDirectoryTooltip}>
              {node}
            </LabelWithDetailedTooltip>
          ),
        }}
        rolesLabel={{
          wrap: (node) => (
            <LabelWithDetailedTooltip tooltip={RolesTooltip}>
              {node}
            </LabelWithDetailedTooltip>
          ),
        }}
        defaultRoleLabel={{
          wrap: (node) => (
            <LabelWithDetailedTooltip tooltip={DefaultRoleTooltip}>
              {node}
            </LabelWithDetailedTooltip>
          ),
        }}
        providerSelect={{
          value: config.provider,
          onChange: async (provider) => {
            await changeConfigProvider(provider as AppAuthProvider);
          },
          children: PROVIDERS.map((p) => {
            return (
              <StyleSelect.Option key={p.key} value={p.key}>
                {p.label}
              </StyleSelect.Option>
            );
          }),
        }}
        providerSettings={
          <ProviderSettings
            projectId={project.id}
            config={config}
            mutateAuthConfig={mutateAuthConfig}
          />
        }
        directorySelect={{
          value: config.directoryId,
          children: [
            ...directories.map((d) => (
              <Select.Option key={d.id} value={d.id}>
                {d.name}
              </Select.Option>
            )),
            <Select.Option key="new" value="new">
              Create new directory
            </Select.Option>,
          ],
          onChange: async (directoryId) => {
            if (directoryId) {
              if (directoryId === "new") {
                await createNewDirectory();
              } else {
                await changeConfigDirectory(directoryId);
              }
            }
          },
        }}
        manageBtn={{
          onClick: () => {
            const directory = directories.find(
              (d) => d.id === config.directoryId
            );
            if (directory) {
              setSelectedDirectory(directory);
            }
          },
        }}
        roles={<RolesControl appCtx={appCtx} project={project} />}
        addRoleBtn={{
          onClick: async () => {
            await mutateRoles(
              async () => {
                await appCtx.api.createAppRole(project.id);
                return await appCtx.api.listAppRoles(project.id);
              },
              {
                optimisticData: [
                  { id: mkUuid(), name: "Editor", order: 1000, isFake: true },
                  ...roles,
                ],
              }
            );

            await mutateHostAppAuthData();
          },
        }}
        roleSelect={{
          value: defaultPageRoleId ?? "anon",
          onChange: async (roleId) => {
            if (roleId === "anon") {
              await hostFrameApi.setDefaultPageRoleId(null);
            } else {
              await hostFrameApi.setDefaultPageRoleId(roleId);
            }
          },
          children: [
            ...roles.map((r) => (
              <Select.Option key={r.id} value={r.id}>
                {r.name}
              </Select.Option>
            )),
            <Select.Option key="anon" value="anon">
              Anonymous
            </Select.Option>,
          ],
        }}
        {...rest}
      />
    </>
  );
}

const SettingsTab = React.forwardRef(SettingsTab_);
export default SettingsTab;
