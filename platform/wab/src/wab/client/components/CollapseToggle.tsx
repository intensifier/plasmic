// This is a skeleton starter React component generated by Plasmic.
// This file is owned by you, feel free to edit as you see fit.
import { HTMLElementRefOf } from "@plasmicapp/react-web";
import * as React from "react";
import {
  DefaultCollapseToggleProps,
  PlasmicCollapseToggle,
} from "@/wab/client/plasmic/plasmic_kit_left_pane/PlasmicCollapseToggle";

// Your component props start with props for variants and slots you defined
// in Plasmic, but you can add more here, like event handlers that you can
// attach to named nodes in your component.
//
// If you don't want to expose certain variants or slots as a prop, you can use
// Omit to hide them:
//
// interface CollapseToggleProps extends Omit<DefaultCollapseToggleProps, "hideProps1"|"hideProp2"> {
//   // etc.
// }
//
// You can also stop extending from DefaultCollapseToggleProps altogether and have
// total control over the props for your component.
export interface CollapseToggleProps extends DefaultCollapseToggleProps {
  onCollapseStateChange?: () => void;
  initialCollapseState?: boolean;
}

function CollapseToggle_(
  props: CollapseToggleProps,
  ref: HTMLElementRefOf<"div">
) {
  // Use PlasmicCollapseToggle to render this component as it was
  // designed in Plasmic, by activating the appropriate variants,
  // attaching the appropriate event handlers, etc.  You
  // can also install whatever React hooks you need here to manage state or
  // fetch data.
  //
  // Props you can pass into PlasmicCollapseToggle are:
  // 1. Variants you want to activate,
  // 2. Contents for slots you want to fill,
  // 3. Overrides for any named node in the component to attach behavior and data,
  // 4. Props to set on the root node.
  //
  // By default, we are just piping all CollapseToggleProps here, but feel free
  // to do whatever works for you.
  const { onCollapseStateChange, initialCollapseState, ...rest } = props;

  const [isCollapsed, setIsCollapsed] = React.useState<boolean>(
    initialCollapseState ?? false
  );

  return (
    <PlasmicCollapseToggle
      root={{ ref }}
      onClick={() => {
        // eslint-disable-next-line @typescript-eslint/no-shadow
        setIsCollapsed((isCollapsed) => !isCollapsed);
        if (!!onCollapseStateChange) {
          onCollapseStateChange();
        }
      }}
      collapseState={isCollapsed ? "collapsed" : "expanded"}
      {...rest}
    />
  );
}

const CollapseToggle = React.forwardRef(CollapseToggle_);
export default CollapseToggle;
