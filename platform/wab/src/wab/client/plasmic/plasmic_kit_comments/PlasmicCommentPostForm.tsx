// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: BP7V3EkXPURJVwwMyWoHn
// Component: qi3Y1X2qZ7

import * as React from "react";

import {
  Flex as Flex__,
  SingleBooleanChoiceArg,
  Stack as Stack__,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateStateOnChangeProp,
  hasVariant,
  useDollarState,
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";

import TextField from "../../components/plexus/TextField"; // plasmic-import: tKtZ3ZcVITrx/component
import Button from "../../components/widgets/Button"; // plasmic-import: SEF-sRmSoqV5c/component
import IconButton from "../../components/widgets/IconButton"; // plasmic-import: LPry-TF4j22a/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import plasmic_plasmic_kit_design_system_deprecated_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import projectcss from "./plasmic_plasmic_kit_comments.module.css"; // plasmic-import: BP7V3EkXPURJVwwMyWoHn/projectcss
import sty from "./PlasmicCommentPostForm.module.css"; // plasmic-import: qi3Y1X2qZ7/css

import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: _-_PqTBs1dWd/icon
import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: NiBzf-jmX1er/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: 4ZDQfZwOzIuI/icon

createPlasmicElementProxy;

export type PlasmicCommentPostForm__VariantMembers = {
  isEditing: "isEditing";
};
export type PlasmicCommentPostForm__VariantsArgs = {
  isEditing?: SingleBooleanChoiceArg<"isEditing">;
};
type VariantPropType = keyof PlasmicCommentPostForm__VariantsArgs;
export const PlasmicCommentPostForm__VariantProps = new Array<VariantPropType>(
  "isEditing"
);

export type PlasmicCommentPostForm__ArgsType = {};
type ArgPropType = keyof PlasmicCommentPostForm__ArgsType;
export const PlasmicCommentPostForm__ArgProps = new Array<ArgPropType>();

export type PlasmicCommentPostForm__OverridesType = {
  root?: Flex__<"div">;
  bodyInput?: Flex__<typeof TextField>;
  mentionIcon?: Flex__<typeof IconButton>;
  shareProjectIcon?: Flex__<typeof IconButton>;
  markdownHintsIcon?: Flex__<typeof IconButton>;
  submitButton?: Flex__<typeof Button>;
};

export interface DefaultCommentPostFormProps {
  isEditing?: SingleBooleanChoiceArg<"isEditing">;
  className?: string;
}

const $$ = {};

function PlasmicCommentPostForm__RenderFunc(props: {
  variants: PlasmicCommentPostForm__VariantsArgs;
  args: PlasmicCommentPostForm__ArgsType;
  overrides: PlasmicCommentPostForm__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "isEditing",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isEditing,
      },
      {
        path: "bodyInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
      },
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs,
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_design_system_deprecated_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        sty.root,
        { [sty.rootisEditing]: hasVariant($state, "isEditing", "isEditing") }
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__njtN0)}>
        <TextField
          data-plasmic-name={"bodyInput"}
          data-plasmic-override={overrides.bodyInput}
          autoComplete={["off"]}
          className={classNames("__wab_instance", sty.bodyInput, {
            [sty.bodyInputisEditing]: hasVariant(
              $state,
              "isEditing",
              "isEditing"
            ),
          })}
          multiLine={true}
          onChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["bodyInput", "value"]).apply(
              null,
              eventArgs
            );

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }
          }}
          placeholder={"Add a comment"}
          showLabel={false}
        />
      </div>
      <div
        className={classNames(projectcss.all, sty.freeBox__ekXz, {
          [sty.freeBoxisEditing__ekXzZsQtK]: hasVariant(
            $state,
            "isEditing",
            "isEditing"
          ),
        })}
      >
        <div
          className={classNames(projectcss.all, sty.freeBox__rndZx, {
            [sty.freeBoxisEditing__rndZxZsQtK]: hasVariant(
              $state,
              "isEditing",
              "isEditing"
            ),
          })}
        >
          <IconButton
            data-plasmic-name={"mentionIcon"}
            data-plasmic-override={overrides.mentionIcon}
            className={classNames("__wab_instance", sty.mentionIcon, {
              [sty.mentionIconisEditing]: hasVariant(
                $state,
                "isEditing",
                "isEditing"
              ),
            })}
            type={[]}
          >
            <IconIcon
              className={classNames(projectcss.all, sty.svg__wnixe)}
              role={"img"}
            />
          </IconButton>
          <IconButton
            data-plasmic-name={"shareProjectIcon"}
            data-plasmic-override={overrides.shareProjectIcon}
            className={classNames("__wab_instance", sty.shareProjectIcon)}
            type={[]}
          >
            <Icon2Icon
              className={classNames(projectcss.all, sty.svg__t3Ip6)}
              role={"img"}
            />
          </IconButton>
          <IconButton
            data-plasmic-name={"markdownHintsIcon"}
            data-plasmic-override={overrides.markdownHintsIcon}
            className={classNames("__wab_instance", sty.markdownHintsIcon)}
            type={[]}
          >
            <Icon3Icon
              className={classNames(projectcss.all, sty.svg__kDvAo)}
              role={"img"}
            />
          </IconButton>
        </div>
        <Button
          data-plasmic-name={"submitButton"}
          data-plasmic-override={overrides.submitButton}
          className={classNames("__wab_instance", sty.submitButton, {
            [sty.submitButtonisEditing]: hasVariant(
              $state,
              "isEditing",
              "isEditing"
            ),
          })}
          isSubmit={true}
          size={"wide"}
          type={["primary"]}
        >
          {"Send"}
        </Button>
      </div>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "bodyInput",
    "mentionIcon",
    "shareProjectIcon",
    "markdownHintsIcon",
    "submitButton",
  ],
  bodyInput: ["bodyInput"],
  mentionIcon: ["mentionIcon"],
  shareProjectIcon: ["shareProjectIcon"],
  markdownHintsIcon: ["markdownHintsIcon"],
  submitButton: ["submitButton"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  bodyInput: typeof TextField;
  mentionIcon: typeof IconButton;
  shareProjectIcon: typeof IconButton;
  markdownHintsIcon: typeof IconButton;
  submitButton: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCommentPostForm__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCommentPostForm__VariantsArgs;
    args?: PlasmicCommentPostForm__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCommentPostForm__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicCommentPostForm__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCommentPostForm__ArgProps,
          internalVariantPropNames: PlasmicCommentPostForm__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicCommentPostForm__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCommentPostForm";
  } else {
    func.displayName = `PlasmicCommentPostForm.${nodeName}`;
  }
  return func;
}

export const PlasmicCommentPostForm = Object.assign(
  // Top-level PlasmicCommentPostForm renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    bodyInput: makeNodeComponent("bodyInput"),
    mentionIcon: makeNodeComponent("mentionIcon"),
    shareProjectIcon: makeNodeComponent("shareProjectIcon"),
    markdownHintsIcon: makeNodeComponent("markdownHintsIcon"),
    submitButton: makeNodeComponent("submitButton"),

    // Metadata about props expected for PlasmicCommentPostForm
    internalVariantProps: PlasmicCommentPostForm__VariantProps,
    internalArgProps: PlasmicCommentPostForm__ArgProps,
  }
);

export default PlasmicCommentPostForm;
/* prettier-ignore-end */
